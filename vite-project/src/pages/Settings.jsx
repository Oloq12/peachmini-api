import React, { useState } from 'react';

const Settings = () => {
  const [notifications, setNotifications] = useState(true);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [language, setLanguage] = useState('ru');

  const settingsSections = [
    {
      title: '–ê–∫–∫–∞—É–Ω—Ç',
      items: [
        { icon: 'üë§', label: '–ü—Ä–æ—Ñ–∏–ª—å', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', action: () => {} },
        { icon: 'üîê', label: '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏', action: () => {} },
        { icon: 'üëë', label: 'Premium', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', highlight: true, action: () => {} },
      ],
    },
    {
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      items: [
        { 
          icon: 'üîî', 
          label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 
          description: '–ü–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è',
          toggle: true,
          value: notifications,
          onChange: setNotifications,
        },
        { 
          icon: 'üîä', 
          label: '–ó–≤—É–∫–∏', 
          description: '–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
          toggle: true,
          value: soundEnabled,
          onChange: setSoundEnabled,
        },
        { icon: 'üåç', label: '–Ø–∑—ã–∫', description: language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English', action: () => {} },
        { icon: 'üé®', label: '–¢–µ–º–∞', description: '–¢—ë–º–Ω–∞—è', action: () => {} },
      ],
    },
    {
      title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      items: [
        { icon: '‚ùì', label: '–ü–æ–º–æ—â—å', description: 'FAQ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', action: () => {} },
        { icon: '‚≠ê', label: '–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º', action: () => {} },
        { icon: 'üìÑ', label: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', action: () => {} },
        { icon: 'üîí', label: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', action: () => {} },
      ],
    },
  ];

  return (
    <div className="min-h-screen p-4 pt-6 pb-4">
      {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div className="bg-gradient-to-br from-primary to-purple-600 rounded-3xl p-6 mb-6">
        <div className="flex items-center">
          <div className="w-20 h-20 bg-white/20 backdrop-blur rounded-2xl flex items-center justify-center text-4xl mr-4">
            üë§
          </div>
          <div className="flex-1">
            <h2 className="text-2xl font-bold mb-1">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h2>
            <p className="text-purple-200">user@example.com</p>
          </div>
          <button className="bg-white/20 backdrop-blur px-4 py-2 rounded-xl font-semibold hover:bg-white/30 transition-colors">
            –ò–∑–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-3 gap-3 mb-6">
        <div className="bg-background-secondary rounded-2xl p-4 text-center border border-gray-800">
          <div className="text-2xl font-bold text-primary">12</div>
          <div className="text-xs text-gray-400 mt-1">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
        </div>
        <div className="bg-background-secondary rounded-2xl p-4 text-center border border-gray-800">
          <div className="text-2xl font-bold text-primary">245</div>
          <div className="text-xs text-gray-400 mt-1">–°–æ–æ–±—â–µ–Ω–∏–π</div>
        </div>
        <div className="bg-background-secondary rounded-2xl p-4 text-center border border-gray-800">
          <div className="text-2xl font-bold text-primary">8</div>
          <div className="text-xs text-gray-400 mt-1">–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π</div>
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {settingsSections.map((section, sectionIndex) => (
        <div key={sectionIndex} className="mb-6">
          <h3 className="text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3 px-2">
            {section.title}
          </h3>
          <div className="bg-background-secondary rounded-2xl border border-gray-800 overflow-hidden">
            {section.items.map((item, itemIndex) => (
              <button
                key={itemIndex}
                onClick={item.action}
                className={`w-full p-4 flex items-center hover:bg-background-tertiary transition-colors ${
                  itemIndex !== section.items.length - 1 ? 'border-b border-gray-800' : ''
                } ${item.highlight ? 'bg-primary/10' : ''}`}
              >
                <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-purple-600/20 rounded-xl flex items-center justify-center text-xl mr-3 flex-shrink-0">
                  {item.icon}
                </div>
                <div className="flex-1 text-left">
                  <div className="font-semibold flex items-center">
                    {item.label}
                    {item.highlight && (
                      <span className="ml-2 bg-gradient-to-r from-primary to-purple-600 px-2 py-0.5 rounded-full text-xs">
                        Pro
                      </span>
                    )}
                  </div>
                  {item.description && (
                    <div className="text-sm text-gray-400">{item.description}</div>
                  )}
                </div>
                {item.toggle ? (
                  <div
                    onClick={(e) => {
                      e.stopPropagation();
                      item.onChange(!item.value);
                    }}
                    className={`relative w-12 h-7 rounded-full transition-colors cursor-pointer ${
                      item.value ? 'bg-primary' : 'bg-gray-700'
                    }`}
                  >
                    <div
                      className={`absolute top-1 w-5 h-5 bg-white rounded-full transition-transform ${
                        item.value ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </div>
                ) : (
                  <svg className="w-5 h-5 text-gray-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                )}
              </button>
            ))}
          </div>
        </div>
      ))}

      {/* –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
      <div className="text-center text-sm text-gray-500 mb-4">
        –í–µ—Ä—Å–∏—è 1.0.0
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
      <button className="w-full bg-background-secondary border border-red-900/30 text-red-500 font-semibold py-4 rounded-2xl hover:bg-red-950/20 transition-colors">
        –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
      </button>
    </div>
  );
};

export default Settings;

