// Vercel Serverless API with Mock Data
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');

const app = express();

// Middleware to handle /api prefix
app.use((req, res, next) => {
  // Remove /api prefix if present
  if (req.url.startsWith('/api/')) {
    req.url = req.url.replace('/api', '');
  }
  next();
});

// Mock data
const mockGirls = [
  {
    id: '1',
    name: '–ê–ª–∏—Å–∞',
    slug: 'alisa',
    avatarUrl: 'https://i.pravatar.cc/300?img=1',
    shortDesc: '–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä...',
    persona: '–¢—ã –ê–ª–∏—Å–∞ - –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ 22 –ª–µ—Ç. –¢—ã –ª—é–±–∏—à—å —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏, –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –æ–±—â–∞—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏. –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ –∏ —Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.',
    bioMemory: [
      '–õ—é–±–∏—Ç —á–∏—Ç–∞—Ç—å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É',
      '–ò–∑—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–ñ–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ'
    ],
    starterPhrases: [
      '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
      '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!',
      '–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?'
    ]
  },
  {
    id: '2',
    name: '–ú–∏–ª–∞',
    slug: 'mila',
    avatarUrl: 'https://i.pravatar.cc/300?img=2',
    shortDesc: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ö—É–¥–æ–∂–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∏–¥–∏—Ç –∫—Ä–∞—Å–æ—Ç—É –≤–æ –≤—Å–µ–º...',
    persona: '–¢—ã –ú–∏–ª–∞ - —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ö—É–¥–æ–∂–Ω–∏—Ü–∞ 24 –ª–µ—Ç. –¢—ã —Ä–∏—Å—É–µ—à—å –∫–∞—Ä—Ç–∏–Ω—ã, –ª—é–±–∏—à—å –ø—Ä–∏—Ä–æ–¥—É –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–æ–º. –£ —Ç–µ–±—è –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Ç—ã –≤–∏–¥–∏—à—å –∫—Ä–∞—Å–æ—Ç—É –≤ —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö.',
    bioMemory: [
      '–ü–∏—à–µ—Ç –º–∞—Å–ª–æ–º',
      '–õ—é–±–∏—Ç –∑–∞–∫–∞—Ç—ã',
      '–ú–µ—á—Ç–∞–µ—Ç –æ –≤—ã—Å—Ç–∞–≤–∫–µ'
    ],
    starterPhrases: [
      '–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–∞—Ä—Ç–∏–Ω—ã?',
      '–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è?',
      '–ò—Å–∫—É—Å—Å—Ç–≤–æ - —ç—Ç–æ –∂–∏–∑–Ω—å!'
    ]
  },
  {
    id: '3',
    name: '–Æ–Ω–∞',
    slug: 'yuna',
    avatarUrl: 'https://i.pravatar.cc/300?img=3',
    shortDesc: '–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∫–∞ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ –∂–∏–∑–Ω—å...',
    persona: '–¢—ã –Æ–Ω–∞ - —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∫–∞ 20 –ª–µ—Ç. –¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –π–æ–≥–æ–π, –±–µ–≥–∞–µ—à—å –ø–æ —É—Ç—Ä–∞–º –∏ –≤–µ–¥–µ—à—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏. –¢—ã –≤—Å–µ–≥–¥–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ –∏ –∑–∞—Ä—è–∂–∞–µ—à—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π.',
    bioMemory: [
      '–ú–∞—Å—Ç–µ—Ä –π–æ–≥–∏',
      '–ü—Ä–æ–±–µ–≥–∞–µ—Ç 5–∫–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–∫–∞'
    ],
    starterPhrases: [
      '–î–∞–≤–∞–π –∑–∞–π–º–µ–º—Å—è —Å–ø–æ—Ä—Ç–æ–º!',
      '–ô–æ–≥–∞ - —ç—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏',
      '–ó–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ!'
    ]
  },
  {
    id: '4',
    name: '–õ–µ—è',
    slug: 'leya',
    avatarUrl: 'https://i.pravatar.cc/300?img=4',
    shortDesc: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –∏ –º—É–¥—Ä–∞—è –¥–µ–≤—É—à–∫–∞ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –º—ã—Å–ª—è–º–∏...',
    persona: '–¢—ã –õ–µ—è - –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –∏ –º—É–¥—Ä–∞—è –¥–µ–≤—É—à–∫–∞ 26 –ª–µ—Ç. –¢—ã –ª—é–±–∏—à—å —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é, –∏–∑—É—á–∞–µ—à—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∏ –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ. –£ —Ç–µ–±—è –≥–ª—É–±–æ–∫–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä –∏ —Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ –¥–µ–ª—É.',
    bioMemory: [
      '–ò–∑—É—á–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é',
      '–õ—é–±–∏—Ç —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é',
      '–ü–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º'
    ],
    starterPhrases: [
      '–ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
      '–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∂–∏–∑–Ω–∏',
      '–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω'
    ]
  },
  {
    id: '5',
    name: '–í–µ—Ä–∞',
    slug: 'vera',
    avatarUrl: 'https://i.pravatar.cc/300?img=5',
    shortDesc: '–î–æ–±—Ä–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º...',
    persona: '–¢—ã –í–µ—Ä–∞ - –¥–æ–±—Ä–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞ 28 –ª–µ—Ç. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –±–æ–ª—å–Ω–∏—Ü–µ, –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É. –£ —Ç–µ–±—è –±–æ–ª—å—à–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —Ç—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ –¥—Ä—É–≥–∏—Ö.',
    bioMemory: [
      '–†–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å–Ω–∏—Ü–µ',
      '–õ—é–±–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º',
      '–ò–º–µ–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
    ],
    starterPhrases: [
      '–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?',
      '–ó–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –≤–∞–∂–Ω–æ',
      '–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!'
    ]
  },
  {
    id: '6',
    name: '–ù–∞–æ–º–∏',
    slug: 'naomi',
    avatarUrl: 'https://i.pravatar.cc/300?img=6',
    shortDesc: '–°—Ç–∏–ª—å–Ω–∞—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–∞—è –≤ —Å–µ–±–µ –±–∏–∑–Ω–µ—Å–≤—É–º–µ–Ω...',
    persona: '–¢—ã –ù–∞–æ–º–∏ - —É–≤–µ—Ä–µ–Ω–Ω–∞—è –≤ —Å–µ–±–µ –±–∏–∑–Ω–µ—Å–≤—É–º–µ–Ω 30 –ª–µ—Ç. –¢—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π, –ª—é–±–∏—à—å –º–æ–¥—É –∏ –≤—Å–µ–≥–¥–∞ –≤—ã–≥–ª—è–¥–∏—à—å –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –£ —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Ç—ã –∑–Ω–∞–µ—à—å, —á–µ–≥–æ —Ö–æ—á–µ—à—å –æ—Ç –∂–∏–∑–Ω–∏.',
    bioMemory: [
      '–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏–µ–π',
      '–õ—é–±–∏—Ç –º–æ–¥—É',
      '–ñ–∏–≤–µ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞'
    ],
    starterPhrases: [
      '–î–µ–ª–∞ –∏–¥—É—Ç –æ—Ç–ª–∏—á–Ω–æ!',
      '–°—Ç–∏–ª—å - —ç—Ç–æ –≤–∞–∂–Ω–æ',
      '–£—Å–ø–µ—Ö - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã'
    ]
  }
];

// Middleware
app.use(cors({
  origin: [
    'http://localhost:5173',
    'https://peach-*.vercel.app',
    'https://*.vercel.app'
  ],
  credentials: false
}));
app.use(express.json());

// Environment variables
const OPENAI_KEY = process.env.OPENAI_KEY;

let ai = null;

// Initialize OpenAI
try {
  if (OPENAI_KEY) {
    ai = new OpenAI({
      apiKey: OPENAI_KEY,
      httpAgent: process.env.HTTPS_PROXY ? new (require('https-proxy-agent'))(process.env.HTTPS_PROXY) : undefined
    });
    console.log('‚úÖ OpenAI connected');
  }
} catch (e) {
  console.error('‚ùå OpenAI error:', e);
}

// Health check
app.get('/health', (req, res) => {
  console.log('[API] /health called');
  res.json({
    ok: true,
    time: Date.now(),
    pb: true, // Mock data available
    ai: !!ai
  });
});

// Girls endpoints
app.get('/girls', async (req, res) => {
  try {
    console.log('üìä Get girls called');
    return res.json({ ok: true, girls: mockGirls });
  } catch (e) {
    console.error('‚ùå Get girls error:', e);
    return res.status(500).json({ ok: false, error: 'FETCH_FAIL' });
  }
});

app.get('/girls/:slug', async (req, res) => {
  try {
    const { slug } = req.params;
    console.log('üìä Get girl by slug:', slug);
    
    const girl = mockGirls.find(g => g.slug === slug);
    if (!girl) {
      return res.status(404).json({ ok: false, error: 'GIRL_NOT_FOUND' });
    }
    
    return res.json({
      ok: true,
      girl: {
        id: girl.id,
        name: girl.name,
        slug: girl.slug,
        avatarUrl: girl.avatarUrl,
        persona: girl.persona,
        bioMemory: girl.bioMemory,
        starterPhrases: girl.starterPhrases
      }
    });
  } catch (e) {
    console.error('‚ùå Get girl by slug error:', e);
    return res.status(500).json({ ok: false, error: 'FETCH_FAIL' });
  }
});

// Chat endpoint
app.post('/chat/reply', async (req, res) => {
  try {
    const { girlId, userMsg, userId = 'demo' } = req.body || {};
    
    console.log('üí¨ Chat request:', { girlId, userMsg: userMsg?.slice(0, 20), userId });
    
    if (!girlId || !userMsg) {
      return res.status(400).json({ ok: false, error: 'GIRL_ID_AND_MESSAGE_REQUIRED' });
    }

    if (!ai) return res.status(503).json({ ok: false, error: 'AI_NOT_CONFIGURED' });

    // Get character data
    const girl = mockGirls.find(g => g.id === girlId);
    if (!girl) return res.status(404).json({ ok: false, error: 'GIRL_NOT_FOUND' });

    // Demo balance
    const balance = 1000;

    // Build conversation
    const conversation = [
      { role: 'system', content: girl.persona }
    ];

    // Add current message
    conversation.push({ role: 'user', content: userMsg });

    // Generate response
    const completion = await ai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: conversation,
      max_tokens: 300,
      temperature: 0.8
    });

    const reply = completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å.';

    console.log(`‚úÖ Chat: ${userId} -> ${girl.name}: "${userMsg.slice(0, 20)}..." -> "${reply.slice(0, 20)}..."`);

    return res.json({
      ok: true,
      reply,
      balance: balance - 2 // Demo: deduct 2 PP
    });

  } catch (e) {
    console.error('‚ùå Chat error:', e);
    return res.status(500).json({ ok: false, error: 'CHAT_FAIL' });
  }
});

// Create girl endpoint
app.post('/girls', async (req, res) => {
  try {
    const { name, origin, persona, bioMemory, starterPhrases } = req.body || {};
    if (!name || !persona) return res.status(400).json({ ok: false, error: 'NAME_AND_PERSONA_REQUIRED' });
    
    const slug = name.toLowerCase().replace(/[^a-z–∞-—è—ë0-9\s]/gi, '').replace(/\s+/g, '-') + '-' + Date.now();
    const newId = (mockGirls.length + 1).toString();
    
    const newGirl = {
      id: newId,
      name,
      slug,
      avatarUrl: 'https://i.pravatar.cc/300?img=' + Math.floor(Math.random() * 70),
      shortDesc: Array.isArray(bioMemory) && bioMemory[0] ? bioMemory[0].slice(0, 120) : persona.slice(0, 120),
      persona,
      bioMemory: bioMemory || [],
      starterPhrases: starterPhrases || []
    };
    
    // Add to mock data (in real app this would be saved to database)
    mockGirls.push(newGirl);
    
    console.log(`‚úÖ Created girl: ${name} (${slug})`);
    return res.json({ ok: true, id: newId, slug });
  } catch (e) {
    console.error('‚ùå Create girl error:', e);
    return res.status(500).json({ ok: false, error: 'CREATE_FAIL' });
  }
});

// Persona extraction endpoint
app.post('/api/persona/extract', async (req, res) => {
  try {
    const { samples } = req.body || {};
    if (!samples || !Array.isArray(samples) || samples.length === 0) {
      return res.status(400).json({ ok: false, error: 'SAMPLES_REQUIRED' });
    }

    if (!ai) return res.status(503).json({ ok: false, error: 'AI_NOT_CONFIGURED' });

    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:

${samples.map((s, i) => `${i + 1}. ${s}`).join('\n')}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
- systemPrompt: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- bioMemory: –º–∞—Å—Å–∏–≤ –∏–∑ 3-5 —Ñ–∞–∫—Ç–æ–≤ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
- starterPhrases: –º–∞—Å—Å–∏–≤ –∏–∑ 3-5 –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`;

    const completion = await ai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 800,
      temperature: 0.7
    });

    const response = completion.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(response);
      console.log('‚úÖ Persona extracted:', parsed.systemPrompt?.slice(0, 50) + '...');
      return res.json({ ok: true, ...parsed });
    } catch (e) {
      // Fallback parsing
      const systemPrompt = response.includes('systemPrompt') ? 
        response.match(/systemPrompt["\s]*:["\s]*([^"]+)/)?.[1] || '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.' :
        '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.';
      
      const bioMemory = response.includes('bioMemory') ?
        response.match(/bioMemory["\s]*:["\s]*\[([^\]]+)\]/)?.[1].split(',').map(s => s.trim().replace(/['"]/g, '')) || [] :
        [];
      
      const starterPhrases = response.includes('starterPhrases') ?
        response.match(/starterPhrases["\s]*:["\s]*\[([^\]]+)\]/)?.[1].split(',').map(s => s.trim().replace(/['"]/g, '')) || [] :
        [];

      return res.json({ 
        ok: true, 
        systemPrompt, 
        bioMemory, 
        starterPhrases 
      });
    }

  } catch (e) {
    console.error('‚ùå Persona extraction error:', e);
    return res.status(500).json({ ok: false, error: 'EXTRACTION_FAIL' });
  }
});

// Export for Vercel
module.exports = app;