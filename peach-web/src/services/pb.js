import PocketBase from 'pocketbase';

const PB_URL = import.meta.env.VITE_PB_URL;

let pb = null;

if (PB_URL) {
  pb = new PocketBase(PB_URL);
}

export { pb, PB_URL };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
export async function getCharacters() {
  const API_URL = import.meta.env.VITE_API_URL || 'https://unrazed-wendell-pseudocentric.ngrok-free.dev';
  
  console.log('üîµ getCharacters: API_URL =', API_URL);
  
  try {
    console.log('üîµ getCharacters: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API...');
    const response = await fetch(`${API_URL}/girls`, {
      headers: {
        'ngrok-skip-browser-warning': 'true'
      }
    });
    console.log('üü¢ getCharacters: Response status:', response.status);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    console.log('üìä getCharacters: Data from API:', data);
    if (data.ok && data.girls) {
      console.log('‚úÖ getCharacters: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', data.girls.length, '–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
      return data.girls;
    } else {
      throw new Error('Invalid response format');
    }
  } catch (error) {
    console.error('üî¥ getCharacters: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
    console.log('‚ö†Ô∏è getCharacters: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const mockData = getMockCharacters();
    console.log('üìä getCharacters: Mock data:', mockData);
    return mockData;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ slug
export async function getCharacterBySlug(slug) {
  const API_URL = import.meta.env.VITE_API_URL || 'https://unrazed-wendell-pseudocentric.ngrok-free.dev';
  
  console.log('üîµ getCharacterBySlug: slug =', slug);
  
  try {
    console.log('üîµ getCharacterBySlug: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ API...');
    const response = await fetch(`${API_URL}/girls/${slug}`, {
      headers: {
        'ngrok-skip-browser-warning': 'true'
      }
    });
    console.log('üü¢ getCharacterBySlug: Response status:', response.status);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    console.log('üìä getCharacterBySlug: Data from API:', data);
    if (data.ok && data.girl) {
      console.log('‚úÖ getCharacterBySlug: –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω');
      return data.girl;
    } else {
      throw new Error('Character not found');
    }
  } catch (error) {
    console.error('üî¥ getCharacterBySlug: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    console.log('‚ö†Ô∏è getCharacterBySlug: Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    const mockChars = getMockCharacters();
    return mockChars.find(c => c.slug === slug) || null;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
function getMockCharacters() {
  return [
    {
      id: '1',
      name: '–ê–º–µ–ª–∏—è',
      slug: 'amelia',
      shortDesc: '–ú–∏–ª–∞—è –∏ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –ª—é–±—è—â–∞—è –∫–Ω–∏–≥–∏ –∏ —É—é—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–∞ –¥–æ–º–∞.',
      avatarUrl: 'https://i.pravatar.cc/300?img=1',
      avatar: 'https://i.pravatar.cc/300?img=1'
    },
    {
      id: '2',
      name: '–í–µ—Ä–æ–Ω–∏–∫–∞',
      slug: 'veronika',
      shortDesc: '–°–º–µ–ª–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.',
      avatarUrl: 'https://i.pravatar.cc/300?img=5',
      avatar: 'https://i.pravatar.cc/300?img=5'
    },
    {
      id: '3',
      name: '–°–æ—Ñ–∏—è',
      slug: 'sofia',
      shortDesc: '–£–º–Ω–∞—è –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è, —Ü–µ–Ω–∏—Ç –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.',
      avatarUrl: 'https://i.pravatar.cc/300?img=9',
      avatar: 'https://i.pravatar.cc/300?img=9'
    },
    {
      id: '4',
      name: '–î–∏–∞–Ω–∞',
      slug: 'diana',
      shortDesc: '–í–µ—Å–µ–ª–∞—è –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è, –∑–∞—Ä—è–∂–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–æ–º –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.',
      avatarUrl: 'https://i.pravatar.cc/300?img=10',
      avatar: 'https://i.pravatar.cc/300?img=10'
    },
    {
      id: '5',
      name: '–ö—Ä–∏—Å—Ç–∏–Ω–∞',
      slug: 'kristina',
      shortDesc: '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –∑–∞–≥–∞–¥–æ—á–Ω–∞—è, —Ö—Ä–∞–Ω–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ–∫—Ä–µ—Ç–æ–≤.',
      avatarUrl: 'https://i.pravatar.cc/300?img=20',
      avatar: 'https://i.pravatar.cc/300?img=20'
    },
    {
      id: '6',
      name: '–í–∞–ª–µ—Ä–∏—è',
      slug: 'valeria',
      shortDesc: '–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å.',
      avatarUrl: 'https://i.pravatar.cc/300?img=23',
      avatar: 'https://i.pravatar.cc/300?img=23'
    }
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
export async function sendChatMessage(girlId, userMsg, userId = 'demo') {
  const API_URL = import.meta.env.VITE_API_URL || 'https://unrazed-wendell-pseudocentric.ngrok-free.dev';
  
  console.log('üîµ sendChatMessage: girlId =', girlId, 'userMsg =', userMsg);
  
  try {
    console.log('üîµ sendChatMessage: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API...');
    const response = await fetch(`${API_URL}/chat/reply`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true'
      },
      body: JSON.stringify({
        girlId,
        userMsg,
        userId
      })
    });
    console.log('üü¢ sendChatMessage: Response status:', response.status);
    
    if (!response.ok) {
      if (response.status === 402) {
        throw new Error('NO_FUNDS');
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üìä sendChatMessage: Data from API:', data);
    
    if (data.ok && data.reply) {
      console.log('‚úÖ sendChatMessage: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return {
        success: true,
        reply: data.reply,
        balance: data.balance
      };
    } else {
      throw new Error('Invalid response format');
    }
  } catch (error) {
    console.error('üî¥ sendChatMessage: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
}

