import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import toast from '../Toast';
import { pb } from '../../services/pb';
import { track } from '../../utils/analytics';

// –ù–∞–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–æ–≤
const AVATAR_POOL = [
  'https://i.pravatar.cc/300?img=1',
  'https://i.pravatar.cc/300?img=5',
  'https://i.pravatar.cc/300?img=9',
  'https://i.pravatar.cc/300?img=16',
  'https://i.pravatar.cc/300?img=20',
  'https://i.pravatar.cc/300?img=26',
  'https://i.pravatar.cc/300?img=31',
  'https://i.pravatar.cc/300?img=32',
  'https://i.pravatar.cc/300?img=36',
  'https://i.pravatar.cc/300?img=44',
  'https://i.pravatar.cc/300?img=47',
  'https://i.pravatar.cc/300?img=49'
];

export default function InspiredTab() {
  const navigate = useNavigate();
  const [samples, setSamples] = useState(['', '', '']);
  const [loading, setLoading] = useState(false);
  const [extractedData, setExtractedData] = useState(null);
  const [saving, setSaving] = useState(false);
  const [avatar, setAvatar] = useState(AVATAR_POOL[Math.floor(Math.random() * AVATAR_POOL.length)]);
  const [showAccordions, setShowAccordions] = useState({
    systemPrompt: false,
    bioMemory: false,
    starterPhrases: false
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ PII (–∏–º–µ–Ω–∞, email, —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
  const checkForPII = (text) => {
    const piiPatterns = [
      /\b[A-Z][a-z]+ [A-Z][a-z]+\b/, // –ò–º–µ–Ω–∞ (First Last)
      /\b[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+\b/, // –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞
      /\b[\w.-]+@[\w.-]+\.\w+\b/, // Email
      /\b\d{3}[-.\s]?\d{3}[-.\s]?\d{4}\b/, // –¢–µ–ª–µ—Ñ–æ–Ω—ã
      /\b\+?\d{10,}\b/ // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    ];
    
    return piiPatterns.some(pattern => pattern.test(text));
  };

  const generateAvatar = () => {
    const newAvatar = AVATAR_POOL[Math.floor(Math.random() * AVATAR_POOL.length)];
    setAvatar(newAvatar);
    toast.info('–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', { duration: 2000 });
  };

  const handleExtract = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const filledSamples = samples.filter(s => s.trim().length > 0);
    
    if (filledSamples.length < 2) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–∏–º–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ PII
    const hasPII = filledSamples.some(s => checkForPII(s));
    if (hasPII) {
      const confirmed = window.confirm(
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–µ–Ω–∞, email, —Ç–µ–ª–µ—Ñ–æ–Ω—ã).\n\n' +
        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n' +
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
      );
      if (!confirmed) return;
    }

    setLoading(true);
    try {
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8787';
      const response = await fetch(`${API_URL}/api/persona/extract`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ samples: filledSamples })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      const data = await response.json();
      setExtractedData(data);
      toast.success('–ü–µ—Ä—Å–æ–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–µ—Ä—Å–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É.');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!extractedData) return;

    const name = window.prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', '–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂');
    if (!name) return;

    setSaving(true);
    try {
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8787';
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ API
      const response = await fetch(`${API_URL}/girls`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': 'true'
        },
        body: JSON.stringify({
          name,
          origin: 'INSPIRED',
          persona: extractedData.systemPrompt || '',
          bioMemory: extractedData.bioMemory || [],
          starterPhrases: extractedData.starterPhrases || []
        })
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.ok || !data.slug) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      track('persona_created', { origin: 'INSPIRED' });

      toast.success('‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç...');
      
      // –†–µ–¥–∏—Ä–µ–∫—Ç –≤ —á–∞—Ç —Å –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º slug)
      setTimeout(() => {
        navigate(`/chats/${data.id}`, { state: { girlId: data.id } });
      }, 800);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ' + error.message);
    } finally {
      setSaving(false);
    }
  };

  const toggleAccordion = (key) => {
    setShowAccordions(prev => ({ ...prev, [key]: !prev[key] }));
  };

  return (
    <div style={{ maxWidth: '800px' }}>
      <p style={{
        color: '#9ca3af',
        marginBottom: '24px',
        fontSize: '1rem'
      }}>
        –í—Å—Ç–∞–≤—å—Ç–µ 2-3 –ø—Ä–∏–º–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
      </p>

      {/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è */}
      {samples.map((sample, i) => (
        <div key={i} style={{ marginBottom: '16px' }}>
          <label style={{
            display: 'block',
            color: '#fff',
            marginBottom: '8px',
            fontSize: '0.9rem',
            fontWeight: '600'
          }}>
            –ü—Ä–∏–º–µ—Ä {i + 1} {i < 2 && <span style={{ color: '#ef4444' }}>*</span>}
          </label>
          <textarea
            value={sample}
            onChange={(e) => {
              const newSamples = [...samples];
              newSamples[i] = e.target.value;
              setSamples(newSamples);
            }}
            placeholder={`–ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...`}
            style={{
              width: '100%',
              minHeight: '120px',
              padding: '12px',
              background: '#1a1a1f',
              border: '1px solid #2a2a2f',
              borderRadius: '12px',
              color: '#fff',
              fontSize: '0.95rem',
              resize: 'vertical',
              fontFamily: 'inherit'
            }}
          />
        </div>
      ))}

      {/* –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É" */}
      <button
        onClick={handleExtract}
        disabled={loading}
        style={{
          width: '100%',
          padding: '16px',
          background: loading ? '#6b7280' : 'linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%)',
          color: '#fff',
          border: 'none',
          borderRadius: '16px',
          fontSize: '1.1rem',
          fontWeight: '600',
          cursor: loading ? 'not-allowed' : 'pointer',
          marginTop: '8px',
          transition: 'all 0.3s ease'
        }}
      >
        {loading ? '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –°–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É'}
      </button>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
      {extractedData && (
        <div style={{
          marginTop: '32px',
          padding: '20px',
          background: '#1a1a1f',
          borderRadius: '16px',
          border: '1px solid #2a2a2f'
        }}>
          <h3 style={{
            fontSize: '1.5rem',
            fontWeight: '700',
            marginBottom: '16px',
            color: '#8b5cf6'
          }}>
            ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ –≥–æ—Ç–æ–≤–∞
          </h3>

          {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤–∞—Ç–∞—Ä–∞ */}
          <div style={{
            marginBottom: '20px',
            padding: '16px',
            background: '#0b0b10',
            borderRadius: '12px',
            display: 'flex',
            alignItems: 'center',
            gap: '16px'
          }}>
            <img
              src={avatar}
              alt="Avatar preview"
              style={{
                width: '80px',
                height: '80px',
                borderRadius: '50%',
                objectFit: 'cover',
                border: '3px solid #8b5cf6'
              }}
            />
            <div style={{ flex: 1 }}>
              <p style={{
                fontSize: '0.9rem',
                color: '#9ca3af',
                marginBottom: '8px'
              }}>
                –¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              </p>
              <button
                onClick={generateAvatar}
                style={{
                  padding: '8px 16px',
                  background: 'linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%)',
                  border: 'none',
                  borderRadius: '8px',
                  color: '#fff',
                  fontSize: '0.9rem',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
              >
                üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π
              </button>
            </div>
          </div>

          {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω: System Prompt */}
          <div style={{ marginBottom: '12px' }}>
            <button
              onClick={() => toggleAccordion('systemPrompt')}
              style={{
                width: '100%',
                padding: '12px 16px',
                background: '#2a2a2f',
                border: 'none',
                borderRadius: '12px',
                color: '#fff',
                textAlign: 'left',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: '1rem',
                fontWeight: '600'
              }}
            >
              <span>üìù System Prompt</span>
              <span>{showAccordions.systemPrompt ? '‚ñº' : '‚ñ∂'}</span>
            </button>
            {showAccordions.systemPrompt && (
              <div style={{
                padding: '12px',
                background: '#0b0b10',
                borderRadius: '0 0 12px 12px',
                marginTop: '4px',
                color: '#9ca3af',
                fontSize: '0.9rem',
                whiteSpace: 'pre-wrap'
              }}>
                {extractedData.systemPrompt || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
            )}
          </div>

          {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω: Bio Memory */}
          <div style={{ marginBottom: '12px' }}>
            <button
              onClick={() => toggleAccordion('bioMemory')}
              style={{
                width: '100%',
                padding: '12px 16px',
                background: '#2a2a2f',
                border: 'none',
                borderRadius: '12px',
                color: '#fff',
                textAlign: 'left',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: '1rem',
                fontWeight: '600'
              }}
            >
              <span>üß† Bio Memory ({extractedData.bioMemory?.length || 0})</span>
              <span>{showAccordions.bioMemory ? '‚ñº' : '‚ñ∂'}</span>
            </button>
            {showAccordions.bioMemory && (
              <div style={{
                padding: '12px',
                background: '#0b0b10',
                borderRadius: '0 0 12px 12px',
                marginTop: '4px'
              }}>
                {extractedData.bioMemory?.map((item, i) => (
                  <div key={i} style={{
                    padding: '8px',
                    marginBottom: '8px',
                    background: '#1a1a1f',
                    borderRadius: '8px',
                    color: '#9ca3af',
                    fontSize: '0.9rem'
                  }}>
                    {item}
                  </div>
                )) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </div>
            )}
          </div>

          {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω: Starter Phrases */}
          <div style={{ marginBottom: '20px' }}>
            <button
              onClick={() => toggleAccordion('starterPhrases')}
              style={{
                width: '100%',
                padding: '12px 16px',
                background: '#2a2a2f',
                border: 'none',
                borderRadius: '12px',
                color: '#fff',
                textAlign: 'left',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: '1rem',
                fontWeight: '600'
              }}
            >
              <span>üí¨ Starter Phrases ({extractedData.starterPhrases?.length || 0})</span>
              <span>{showAccordions.starterPhrases ? '‚ñº' : '‚ñ∂'}</span>
            </button>
            {showAccordions.starterPhrases && (
              <div style={{
                padding: '12px',
                background: '#0b0b10',
                borderRadius: '0 0 12px 12px',
                marginTop: '4px'
              }}>
                {extractedData.starterPhrases?.map((phrase, i) => (
                  <div key={i} style={{
                    padding: '8px',
                    marginBottom: '8px',
                    background: '#1a1a1f',
                    borderRadius: '8px',
                    color: '#9ca3af',
                    fontSize: '0.9rem'
                  }}>
                    {phrase}
                  </div>
                )) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ "–û–∂–∏–≤–∏—Ç—å" */}
          <button
            onClick={handleSave}
            disabled={saving}
            style={{
              width: '100%',
              padding: '16px',
              background: saving ? '#6b7280' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
              color: '#fff',
              border: 'none',
              borderRadius: '16px',
              fontSize: '1.1rem',
              fontWeight: '600',
              cursor: saving ? 'not-allowed' : 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: '0 4px 15px rgba(16, 185, 129, 0.3)'
            }}
          >
            {saving ? 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...' : '‚ú® –û–∂–∏–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}
          </button>
        </div>
      )}
    </div>
  );
}

